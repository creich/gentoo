diff --git a/Makefile.am b/Makefile.am
index bb251f0..c2c1c0a 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -68,8 +68,11 @@ i3status_SOURCES = \
 	src/print_volume.c \
 	src/print_wireless_info.c \
 	src/print_file_contents.c \
-	src/process_runs.c \
-	src/pulse.c
+	src/process_runs.c
+
+if PULSE
+i3status_SOURCES += src/pulse.c
+endif
 
 dist_sysconf_DATA = \
 	i3status.conf
diff --git a/configure.ac b/configure.ac
index cf9e430..11caa33 100644
--- a/configure.ac
+++ b/configure.ac
@@ -80,11 +80,24 @@ AC_CANONICAL_HOST
 PKG_CHECK_MODULES([CONFUSE], [libconfuse])
 PKG_CHECK_MODULES([YAJL], [yajl])
 
+AC_ARG_ENABLE(pulseaudio,
+  AS_HELP_STRING(
+    [--disable-pulseaudio],
+    [build without pulseaudio support]),
+  [ax_pulse=$enableval],
+  [ax_pulse=yes])
+AM_CONDITIONAL([PULSE], [test x$ax_pulse = xyes])
+AS_IF([test x"$ax_pulse" = x"yes"],
+      [PKG_CHECK_MODULES([PULSE], [libpulse])])
+pulse_def=0
+AS_IF([test x"$ax_pulse" = x"yes"],
+      [pulse_def=1])
+AC_DEFINE_UNQUOTED([HAS_PULSEAUDIO], [$pulse_def], [Build with pulseaudio])
+
 case $host_os in
 	linux*)
 	PKG_CHECK_MODULES([NLGENL], [libnl-genl-3.0])
 	PKG_CHECK_MODULES([ALSA], [alsa])
-	PKG_CHECK_MODULES([PULSE], [libpulse])
 	;;
 	netbsd*)
 	AC_SEARCH_LIBS([prop_string_create], [prop])
@@ -151,6 +164,7 @@ AS_HELP_STRING([is release version:], [${is_release}])
 AS_HELP_STRING([enable debug flags:], [${ax_enable_debug}])
 AS_HELP_STRING([code coverage:], [${CODE_COVERAGE_ENABLED}])
 AS_HELP_STRING([enabled sanitizers:], [${ax_enabled_sanitizers}])
+AS_HELP_STRING([pulseaudio support:], [${ax_pulse}])
 
 To compile, run:
 
diff --git a/i3status.c b/i3status.c
index 0898da3..1ab8400 100644
--- a/i3status.c
+++ b/i3status.c
@@ -565,7 +565,13 @@ int main(int argc, char *argv[]) {
                 return 0;
                 break;
             case 'v':
-                printf("i3status " VERSION " © 2008 Michael Stapelberg and contributors\n");
+                printf("i3status " VERSION " © 2008 Michael Stapelberg and contributors\n"
+#if HAS_PULSEAUDIO
+                       "Built with pulseaudio support\n"
+#else
+                       "Built without pulseaudio support\n"
+#endif
+                       );
                 return 0;
                 break;
             case 0:
diff --git a/src/print_battery_info.c b/src/print_battery_info.c
index 1c51624..c8a1d3d 100644
--- a/src/print_battery_info.c
+++ b/src/print_battery_info.c
@@ -31,6 +31,9 @@
 #include <sys/fcntl.h>
 #include <sys/ioctl.h>
 #include <sys/types.h>
+#include <sys/sysctl.h>
+#include <sys/sensors.h>
+#include <sys/sysctl.h>
 #endif
 
 #if defined(__NetBSD__)
@@ -269,11 +272,16 @@ static bool slurp_battery_info(struct battery_info *batt_info, yajl_gen json_gen
 #elif defined(__OpenBSD__)
     /*
 	 * We're using apm(4) here, which is the interface to acpi(4) on amd64/i386 and
-	 * the generic interface on macppc/sparc64/zaurus, instead of using sysctl(3) and
-	 * probing acpi(4) devices.
+	 * the generic interface on macppc/sparc64/zaurus.  Machines that have ACPI
+	 * battery sensors gain some extra information.
 	 */
     struct apm_power_info apm_info;
+    struct sensordev sensordev;
+    struct sensor sensor;
+    size_t sdlen, slen;
     int apm_fd;
+    int dev, mib[5] = {CTL_HW, HW_SENSORS, 0, 0, 0};
+    int volts = 0;
 
     apm_fd = open("/dev/apm", O_RDONLY);
     if (apm_fd < 0) {
@@ -311,6 +319,41 @@ static bool slurp_battery_info(struct battery_info *batt_info, yajl_gen json_gen
     if (batt_info->status != CS_CHARGING) {
         batt_info->seconds_remaining = apm_info.minutes_left * 60;
     }
+
+    /* If acpibat* are present, check sensors for data not present via APM. */
+    batt_info->present_rate = 0;
+    sdlen = sizeof(sensordev);
+    slen = sizeof(sensor);
+
+    for (dev = 0;; dev++) {
+        mib[2] = dev;
+        if (sysctl(mib, 3, &sensordev, &sdlen, NULL, 0) == -1) {
+            break;
+        }
+        /* 'path' is the node within the full path */
+        if (BEGINS_WITH(sensordev.xname, "acpibat")) {
+            /* power0 */
+            mib[3] = SENSOR_WATTS;
+            mib[4] = 0;
+            if (sysctl(mib, 5, &sensor, &slen, NULL, 0) == -1) {
+                /* try current0 */
+                mib[3] = SENSOR_AMPS;
+                if (sysctl(mib, 5, &sensor, &slen, NULL, 0) == -1)
+                    continue;
+                volts = sensor.value;
+
+                /* we also need current voltage to convert amps to watts */
+                mib[3] = SENSOR_VOLTS_DC;
+                mib[4] = 1;
+                if (sysctl(mib, 5, &sensor, &slen, NULL, 0) == -1)
+                    continue;
+
+                batt_info->present_rate += (((float)volts / 1000.0) * ((float)sensor.value / 1000.0));
+            } else {
+                batt_info->present_rate += sensor.value;
+            }
+        }
+    }
 #elif defined(__NetBSD__)
     /*
      * Using envsys(4) via sysmon(4).
diff --git a/src/print_volume.c b/src/print_volume.c
index 91e8ce2..7364d47 100644
--- a/src/print_volume.c
+++ b/src/print_volume.c
@@ -86,7 +86,7 @@ void print_volume(yajl_gen json_gen, char *buffer, const char *fmt, const char *
         free(instance);
     }
 
-#if !defined(__DragonFly__) && !defined(__OpenBSD__)
+#if HAS_PULSEAUDIO
     /* Try PulseAudio first */
 
     /* If the device name has the format "pulse[:N]" where N is the
diff --git a/src/print_wireless_info.c b/src/print_wireless_info.c
index 8b2d210..6215704 100644
--- a/src/print_wireless_info.c
+++ b/src/print_wireless_info.c
@@ -61,6 +61,7 @@
 
 #ifdef __NetBSD__
 #include <sys/types.h>
+#include <sys/socket.h>
 #include <net80211/ieee80211.h>
 #define IW_ESSID_MAX_SIZE IEEE80211_NWID_LEN
 #endif
